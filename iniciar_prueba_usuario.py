#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de inicializaci√≥n para prueba completa de usuario
"""

import os
import sys
from datetime import datetime

def verificar_configuracion():
    """Verificar que todo est√° configurado correctamente"""
    print("üîß VERIFICACI√ìN DE CONFIGURACI√ìN PARA PRUEBA DE USUARIO")
    print("=" * 60)
    
    # 1. Verificar .env
    env_path = ".env"
    if os.path.exists(env_path):
        print("‚úÖ Archivo .env encontrado")
        with open(env_path, 'r') as f:
            content = f.read()
            if "192.168.100.125" in content:
                print("‚úÖ IP SQL Server correcta: 192.168.100.125")
            if "TEST_MODE=false" in content:
                print("‚úÖ Modo SQL Server activado")
            if "app_usuario" in content:
                print("‚úÖ Usuario SQL Server configurado")
    else:
        print("‚ùå Archivo .env no encontrado")
        return False
    
    # 2. Verificar capturador
    if os.path.exists("capturador_incidentes.py"):
        print("‚úÖ Capturador de incidentes disponible")
    else:
        print("‚ùå Capturador de incidentes no encontrado")
        return False
    
    # 3. Verificar directorio de capturas
    if not os.path.exists("capturas_prueba_usuario"):
        os.makedirs("capturas_prueba_usuario")
        print("‚úÖ Directorio de capturas creado")
    else:
        print("‚úÖ Directorio de capturas disponible")
    
    # 4. Verificar conexi√≥n SQL Server
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        import pyodbc
        server = os.getenv('DB_SERVER')
        database = os.getenv('DB_DATABASE')
        username = os.getenv('DB_USERNAME')
        password = os.getenv('DB_PASSWORD')
        
        conn_str = (
            f'DRIVER={{ODBC Driver 17 for SQL Server}};'
            f'SERVER={server};'
            f'DATABASE={database};'
            f'UID={username};'
            f'PWD={password};'
            f'Encrypt=no;'
        )
        
        conn = pyodbc.connect(conn_str, timeout=5)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM Incidentes")
        count = cursor.fetchone()[0]
        conn.close()
        
        print(f"‚úÖ SQL Server conectado: {count} incidentes existentes")
        
    except Exception as e:
        print(f"‚ùå Error conexi√≥n SQL Server: {e}")
        return False
    
    # 5. Verificar m√≥dulo Flask
    sys.path.append('agente_digital_api')
    try:
        from agente_digital_api.app.database import get_db_connection
        conn = get_db_connection()
        if conn:
            conn.close()
            print("‚úÖ M√≥dulo Flask conecta correctamente")
        else:
            print("‚ùå M√≥dulo Flask no puede conectar")
            return False
    except Exception as e:
        print(f"‚ùå Error m√≥dulo Flask: {e}")
        return False
    
    return True

def generar_instrucciones():
    """Generar archivo de instrucciones para el usuario"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    archivo = f"INSTRUCCIONES_PRUEBA_USUARIO_{timestamp}.txt"
    
    with open(archivo, 'w', encoding='utf-8') as f:
        f.write("=" * 80 + "\n")
        f.write("INSTRUCCIONES PARA PRUEBA COMPLETA DE USUARIO\n")
        f.write("=" * 80 + "\n")
        f.write(f"Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write("Proyecto: Agente Digital Flask - Cumplimiento Ley 21.663\n")
        f.write("=" * 80 + "\n\n")
        
        f.write("üéØ OBJETIVO DE LA PRUEBA:\n")
        f.write("=" * 25 + "\n")
        f.write("Verificar que el ciclo completo save-edit-save funciona correctamente\n")
        f.write("y que todos los datos se preservan exactamente como se guardaron.\n\n")
        
        f.write("üìã PASOS A SEGUIR:\n")
        f.write("=" * 18 + "\n")
        f.write("1. Iniciar el servidor Flask:\n")
        f.write("   python3 run.py\n\n")
        
        f.write("2. Abrir el frontend en el navegador:\n")
        f.write("   http://localhost:5000\n\n")
        
        f.write("3. Crear un nuevo incidente CON TODOS los campos:\n")
        f.write("   ‚úÖ T√≠tulo descriptivo\n")
        f.write("   ‚úÖ Descripci√≥n detallada\n")
        f.write("   ‚úÖ Criticidad, tipo de flujo, fechas\n")
        f.write("   ‚úÖ Origen, sistemas afectados, acciones inmediatas\n")
        f.write("   ‚úÖ Responsable cliente\n")
        f.write("   ‚úÖ CAMPOS ANCI: alcance, impacto, servicios, amenaza\n")
        f.write("   ‚úÖ Causa ra√≠z, lecciones aprendidas, plan de mejora\n")
        f.write("   ‚úÖ Seleccionar taxonom√≠as (m√≠nimo 2-3)\n")
        f.write("   ‚úÖ Agregar comentarios a las taxonom√≠as\n")
        f.write("   ‚úÖ Subir archivos de evidencia (m√≠nimo 1-2)\n\n")
        
        f.write("4. GUARDAR el incidente:\n")
        f.write("   üîç Al guardar se generar√° autom√°ticamente:\n")
        f.write("   üìÑ capturas_prueba_usuario/01_CREACION_INCIDENTE_[timestamp].txt\n")
        f.write("   üìã Este archivo contendr√° TODOS los datos enviados\n\n")
        
        f.write("5. EDITAR el incidente reci√©n creado:\n")
        f.write("   üîç Al abrir para edici√≥n se generar√° autom√°ticamente:\n")
        f.write("   üìÑ capturas_prueba_usuario/02_EDICION_INCIDENTE_[id]_[timestamp].txt\n")
        f.write("   üìã Este archivo contendr√° TODOS los datos recuperados\n\n")
        
        f.write("üìä ARCHIVOS GENERADOS AUTOM√ÅTICAMENTE:\n")
        f.write("=" * 40 + "\n")
        f.write("üìÑ 01_CREACION_INCIDENTE_*.txt\n")
        f.write("   - Todos los datos enviados durante la creaci√≥n\n")
        f.write("   - Campos b√°sicos, ANCI, taxonom√≠as, archivos\n")
        f.write("   - JSON completo de la solicitud\n\n")
        
        f.write("üìÑ 02_EDICION_INCIDENTE_*.txt\n")
        f.write("   - Todos los datos recuperados durante la edici√≥n\n")
        f.write("   - Campos preservados, taxonom√≠as, archivos, comentarios\n")
        f.write("   - JSON completo de la respuesta\n\n")
        
        f.write("üîç VERIFICACI√ìN MANUAL:\n")
        f.write("=" * 22 + "\n")
        f.write("1. Comparar ambos archivos TXT\n")
        f.write("2. Verificar que TODOS los campos enviados aparecen en edici√≥n\n")
        f.write("3. Verificar que las taxonom√≠as se preservan\n")
        f.write("4. Verificar que los archivos est√°n disponibles\n")
        f.write("5. Verificar que los comentarios se mantienen\n")
        f.write("6. Verificar que los campos ANCI est√°n completos\n\n")
        
        f.write("‚úÖ CRITERIOS DE √âXITO:\n")
        f.write("=" * 22 + "\n")
        f.write("üéØ Todos los datos enviados durante creaci√≥n aparecen en edici√≥n\n")
        f.write("üéØ Las taxonom√≠as se recuperan con sus comentarios\n")
        f.write("üéØ Los archivos est√°n disponibles para descarga\n")
        f.write("üéØ Los campos ANCI se preservan completamente\n")
        f.write("üéØ No se pierden datos en el ciclo save-edit-save\n\n")
        
        f.write("üö® IMPORTANTE:\n")
        f.write("=" * 12 + "\n")
        f.write("- Los archivos TXT se generan AUTOM√ÅTICAMENTE\n")
        f.write("- NO necesitas hacer nada especial, solo usar la aplicaci√≥n\n")
        f.write("- Cada acci√≥n (crear/editar) genera su archivo correspondiente\n")
        f.write("- Los archivos est√°n en el directorio: capturas_prueba_usuario/\n\n")
        
        f.write("=" * 80 + "\n")
        f.write("üéâ SISTEMA LISTO PARA PRUEBA COMPLETA DE USUARIO\n")
        f.write("=" * 80 + "\n")
    
    print(f"‚úÖ Instrucciones generadas: {archivo}")
    return archivo

def main():
    """Funci√≥n principal"""
    print("üöÄ INICIALIZACI√ìN DE PRUEBA COMPLETA DE USUARIO")
    print("=" * 55)
    print(f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 55)
    
    # Verificar configuraci√≥n
    if verificar_configuracion():
        print("\nüéâ CONFIGURACI√ìN COMPLETA - SISTEMA LISTO")
        print("=" * 45)
        
        # Generar instrucciones
        archivo_instrucciones = generar_instrucciones()
        
        print(f"\nüìã PR√ìXIMOS PASOS:")
        print("=" * 18)
        print("1. python3 run.py")
        print("2. Abrir http://localhost:5000")
        print("3. Crear incidente con todos los campos")
        print("4. Verificar archivos TXT generados autom√°ticamente")
        print(f"5. Leer instrucciones detalladas: {archivo_instrucciones}")
        
        print(f"\n‚úÖ CAPTURAS AUTOM√ÅTICAS CONFIGURADAS")
        print("‚úÖ Sistema listo para prueba de usuario")
        print("=" * 55)
        
        return True
    else:
        print("\n‚ùå CONFIGURACI√ìN INCOMPLETA")
        print("üìã Revisar errores arriba y corregir")
        print("=" * 55)
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)