// INYECCI√ìN DIRECTA DE TAXONOM√çAS
// ================================

(function() {
  console.clear();
  console.log('üíâ INYECCI√ìN DIRECTA DE TAXONOM√çAS');
  console.log('='.repeat(80));
  
  // 1. Primero, expandir la secci√≥n de taxonom√≠as
  console.log('\n1Ô∏è‚É£ Expandiendo secci√≥n de taxonom√≠as...');
  
  const secciones = document.querySelectorAll('.acordeon-seccion');
  let seccionTaxonomia = null;
  
  secciones.forEach(seccion => {
    const titulo = seccion.querySelector('.seccion-titulo')?.textContent || '';
    if (titulo.includes('Taxonom√≠a') || titulo.includes('taxonom√≠a')) {
      seccionTaxonomia = seccion;
      
      // Expandir si no est√° activa
      if (!seccion.classList.contains('activa')) {
        const header = seccion.querySelector('.seccion-header');
        if (header) {
          header.click();
          console.log('‚úÖ Secci√≥n de taxonom√≠as expandida');
        }
      }
    }
  });
  
  if (!seccionTaxonomia) {
    console.error('‚ùå No se encontr√≥ la secci√≥n de taxonom√≠as');
    return;
  }
  
  // 2. Buscar y marcar la taxonom√≠a espec√≠fica
  setTimeout(() => {
    console.log('\n2Ô∏è‚É£ Buscando taxonom√≠as...');
    
    const taxonomias = seccionTaxonomia.querySelectorAll('.taxonomia-item');
    console.log(`Encontradas ${taxonomias.length} taxonom√≠as`);
    
    let taxonomiaPhishing = null;
    
    taxonomias.forEach(tax => {
      const texto = tax.textContent || '';
      if (texto.includes('phishing') || texto.includes('INC_USO_PHIP_ECDP')) {
        taxonomiaPhishing = tax;
        console.log('‚úÖ Encontrada taxonom√≠a de phishing');
        
        // Marcar como seleccionada
        tax.classList.add('seleccionada');
        
        // Marcar el checkbox
        const checkbox = tax.querySelector('input[type="checkbox"]');
        if (checkbox && !checkbox.checked) {
          checkbox.checked = true;
          
          // Disparar evento change
          const event = new Event('change', { bubbles: true });
          checkbox.dispatchEvent(event);
          
          console.log('‚úÖ Checkbox marcado');
        }
        
        // Expandir la taxonom√≠a
        if (!tax.classList.contains('expandida')) {
          const botonExpandir = tax.querySelector('.toggle-icon, .expandir-btn, [class*="expand"]');
          if (botonExpandir) {
            botonExpandir.click();
            console.log('‚úÖ Taxonom√≠a expandida');
          }
        }
      }
    });
    
    // 3. Rellenar los campos de justificaci√≥n y descripci√≥n
    if (taxonomiaPhishing) {
      setTimeout(() => {
        console.log('\n3Ô∏è‚É£ Rellenando campos...');
        
        // Buscar campos dentro de la taxonom√≠a
        const campos = taxonomiaPhishing.querySelectorAll('textarea, input[type="text"]');
        
        campos.forEach(campo => {
          const label = campo.previousElementSibling?.textContent || 
                       campo.closest('label')?.textContent || '';
          
          if (label.includes('Justificaci√≥n') && !campo.value) {
            campo.value = 'asdfsadf sdf sadf s sdf sadf sdf';
            campo.dispatchEvent(new Event('input', { bubbles: true }));
            console.log('‚úÖ Justificaci√≥n rellenada');
          } else if (label.includes('Descripci√≥n') && !campo.value) {
            campo.value = 'dfsffffffffffffffffffffffffffffffffffffffffffffffff ffffffffffffff22222';
            campo.dispatchEvent(new Event('input', { bubbles: true }));
            console.log('‚úÖ Descripci√≥n rellenada');
          }
        });
        
        // 4. Simular archivo adjunto
        console.log('\n4Ô∏è‚É£ Agregando referencia de archivo...');
        
        const archivoInfo = taxonomiaPhishing.querySelector('.archivos-lista, .archivos-container, [class*="archivo"]');
        if (archivoInfo && !archivoInfo.textContent.includes('.pdf')) {
          const archivoHTML = `
            <div class="archivo-item" style="padding: 8px; background: rgba(16, 185, 129, 0.1); border-radius: 4px; margin-top: 8px;">
              <i class="ph-file-pdf" style="color: #10b981;"></i>
              <span style="margin-left: 8px;">evidencia_Actividades_de_phishing_o_fraude_en_infraestructura_propia.pdf</span>
              <span style="margin-left: 8px; color: #6b7280; font-size: 0.875rem;">(50 KB)</span>
            </div>
          `;
          archivoInfo.insertAdjacentHTML('beforeend', archivoHTML);
          console.log('‚úÖ Referencia de archivo agregada');
        }
        
        // 5. Actualizar el badge
        const badge = seccionTaxonomia.querySelector('.badge-count');
        if (badge) {
          badge.textContent = '1';
          badge.style.display = 'inline-flex';
          badge.style.backgroundColor = '#10b981';
          console.log('‚úÖ Badge actualizado');
        }
        
        // 6. Expandir secci√≥n 7
        setTimeout(() => {
          console.log('\n5Ô∏è‚É£ Expandiendo secci√≥n 7...');
          
          const seccion7 = Array.from(secciones).find(s => 
            s.textContent.includes('Resumen de todos los archivos')
          );
          
          if (seccion7 && !seccion7.classList.contains('activa')) {
            const header = seccion7.querySelector('.seccion-header');
            if (header) {
              header.click();
              console.log('‚úÖ Secci√≥n 7 expandida');
              
              // Verificar si hay archivos de taxonom√≠a
              setTimeout(() => {
                const tabla = seccion7.querySelector('table');
                if (tabla) {
                  const filas = tabla.querySelectorAll('tr');
                  let encontrado = false;
                  
                  filas.forEach(tr => {
                    const celdas = tr.querySelectorAll('td');
                    if (celdas.length > 0 && celdas[0]?.textContent?.trim() === '4') {
                      encontrado = true;
                    }
                  });
                  
                  if (!encontrado) {
                    console.log('‚ö†Ô∏è No se encontraron archivos de secci√≥n 4 en la tabla');
                    
                    // Intentar agregar fila manualmente
                    const tbody = tabla.querySelector('tbody');
                    if (tbody) {
                      const nuevaFila = `
                        <tr>
                          <td class="text-center">4</td>
                          <td>Taxonom√≠a del Incidente</td>
                          <td>INC_USO_PHIP_ECDP</td>
                          <td>evidencia_phishing.pdf</td>
                          <td>PDF</td>
                          <td>50 KB</td>
                          <td>19/07/2025</td>
                        </tr>
                      `;
                      tbody.insertAdjacentHTML('beforeend', nuevaFila);
                      console.log('‚úÖ Fila agregada manualmente a la tabla');
                    }
                  } else {
                    console.log('‚úÖ Archivos de secci√≥n 4 encontrados en la tabla');
                  }
                }
              }, 500);
            }
          }
        }, 1000);
        
        console.log('\n‚úÖ PROCESO COMPLETADO');
        console.log('La taxonom√≠a deber√≠a estar visible con:');
        console.log('- ‚úì Checkbox marcado');
        console.log('- ‚úì Borde verde');
        console.log('- ‚úì Campos rellenados');
        console.log('- ‚úì Archivo visible');
        
      }, 500);
    }
    
  }, 500);
})();