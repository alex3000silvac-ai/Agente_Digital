# /etc/nginx/sites-available/agentedigital_load_balancer
# Configuración de Nginx con Load Balancing para múltiples instancias

# Configuración de rate limiting
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=20r/s;
limit_req_zone $binary_remote_addr zone=login_limit:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=upload_limit:10m rate=10r/m;

# Configuración de upstream con múltiples servidores
upstream agentedigital_backend {
    # Método de balancing: least_conn (menos conexiones)
    least_conn;
    
    # Servidores backend
    server 127.0.0.1:8000 max_fails=3 fail_timeout=30s weight=1;
    server 127.0.0.1:8001 max_fails=3 fail_timeout=30s weight=1;
    server 127.0.0.1:8002 max_fails=3 fail_timeout=30s weight=1;
    
    # Configuración de keepalive
    keepalive 32;
    keepalive_requests 100;
    keepalive_timeout 60s;
}

# Configuración de cache para archivos estáticos
proxy_cache_path /var/cache/nginx/agentedigital 
                 levels=1:2 
                 keys_zone=agentedigital_cache:50m 
                 max_size=1g 
                 inactive=60m 
                 use_temp_path=off;

# Configuración de logs personalizados
log_format detailed '$remote_addr - $remote_user [$time_local] '
                   '"$request" $status $body_bytes_sent '
                   '"$http_referer" "$http_user_agent" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time" '
                   'upstream="$upstream_addr" cache="$upstream_cache_status"';

# Redirección de HTTP a HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name agentedigital.local localhost *.agentedigital.cl;
    
    # Permitir Let's Encrypt challenge
    location /.well-known/acme-challenge/ {
        root /var/www/html;
        allow all;
    }
    
    # Redireccionar todo el tráfico a HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# Configuración principal HTTPS con Load Balancing
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name agentedigital.local localhost *.agentedigital.cl;
    
    # Configuración SSL
    ssl_certificate /etc/ssl/certs/agentedigital.crt;
    ssl_certificate_key /etc/ssl/private/agentedigital.key;
    
    # Configuración SSL optimizada
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Headers de seguridad
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options DENY always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self';" always;
    
    # Headers de load balancing
    add_header X-Served-By $hostname always;
    add_header X-Backend-Server $upstream_addr always;
    add_header X-Response-Time $request_time always;
    
    # Configuración de cliente
    client_max_body_size 100M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    client_body_buffer_size 1M;
    
    # Configuración de proxy optimizada
    proxy_buffering on;
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    proxy_busy_buffers_size 8k;
    proxy_temp_file_write_size 8k;
    
    # Timeouts optimizados
    proxy_connect_timeout 10s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;
    
    # Headers de proxy estándar
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $server_name;
    proxy_set_header X-Forwarded-Port $server_port;
    
    # Compresión
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Logging detallado
    access_log /var/log/nginx/agentedigital_access.log detailed;
    error_log /var/log/nginx/agentedigital_error.log warn;
    
    # Health check sin rate limiting
    location = /health {
        access_log off;
        proxy_pass http://agentedigital_backend;
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 10s;
    }
    
    # Health check detallado para monitoreo
    location = /health/detailed {
        access_log off;
        proxy_pass http://agentedigital_backend;
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 5s;
    }
    
    # Endpoints de autenticación con rate limiting estricto
    location /api/auth/login {
        limit_req zone=login_limit burst=5 nodelay;
        limit_req_status 429;
        
        proxy_pass http://agentedigital_backend;
        proxy_next_upstream error timeout http_500 http_502 http_503;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 5s;
        
        # Sticky sessions para login (opcional)
        # ip_hash;
    }
    
    # API endpoints con load balancing
    location /api/ {
        limit_req zone=api_limit burst=40 nodelay;
        limit_req_status 429;
        
        proxy_pass http://agentedigital_backend;
        proxy_redirect off;
        
        # Configuración de failover
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 10s;
        
        # Cache para endpoints específicos
        location ~* /api/(taxonomias|obligaciones) {
            proxy_pass http://agentedigital_backend;
            proxy_cache agentedigital_cache;
            proxy_cache_key $scheme$proxy_host$request_uri$http_authorization;
            proxy_cache_valid 200 302 10m;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_lock on;
            add_header X-Cache-Status $upstream_cache_status;
        }
    }
    
    # Endpoints de upload con configuración especial
    location ~* /api/.*/upload {
        limit_req zone=upload_limit burst=20 nodelay;
        
        proxy_pass http://agentedigital_backend;
        proxy_redirect off;
        
        # Configuraciones específicas para uploads
        proxy_request_buffering off;
        proxy_buffering off;
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
        
        # Failover más conservador para uploads
        proxy_next_upstream error timeout;
        proxy_next_upstream_tries 1;
    }
    
    # Archivos estáticos con cache agresivo
    location /static/ {
        alias /home/agentedigital/apps/agentedigital/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
        
        # Fallback a backend si no existe
        try_files $uri @proxy_to_backend;
    }
    
    # Archivos de uploads (protegidos)
    location /uploads/ {
        internal;  # Solo accesible desde el backend
        alias /home/agentedigital/apps/agentedigital/uploads/;
        
        # Headers de seguridad para descargas
        add_header X-Content-Type-Options nosniff;
        add_header Content-Disposition attachment;
        
        # Fallback a backend para autorización
        error_page 404 = @proxy_to_backend;
    }
    
    # Frontend SPA (Vue.js)
    location / {
        try_files $uri $uri/ @proxy_to_backend;
        
        # Cache para archivos del frontend
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            try_files $uri @proxy_to_backend;
        }
    }
    
    # Proxy principal con load balancing
    location @proxy_to_backend {
        proxy_pass http://agentedigital_backend;
        proxy_redirect off;
        
        # Configuración de failover
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 10s;
        
        # WebSockets support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # Bloquear acceso a archivos sensibles
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~* \.(env|ini|conf|cnf|sql|bak|old|orig|tmp)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Bloquear bots maliciosos y scanners
    location ~* (wp-admin|wp-login|phpmyadmin|admin|xmlrpc|\.php$) {
        return 444;
    }
    
    # Error pages personalizadas
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    error_page 429 /429.html;
    
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /429.html {
        root /usr/share/nginx/html;
        internal;
    }
}

# Servidor de métricas y monitoreo
server {
    listen 127.0.0.1:8080;
    server_name localhost;
    
    # Status de Nginx
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }
    
    # Status del upstream
    location /upstream_status {
        access_log off;
        allow 127.0.0.1;
        deny all;
        return 200 "Upstream servers status\n";
        add_header Content-Type text/plain;
    }
}