// =====================================================
// DEBUG PARA VERIFICAR TAXONOM√çAS EN EL FRONTEND
// =====================================================
// Ejecutar en la consola del navegador cuando est√© en la p√°gina de edici√≥n ANCI
// =====================================================

console.log('üîç INICIANDO DEBUG DE TAXONOM√çAS...\n');

setTimeout(() => {
    // Buscar el componente AcordeonIncidenteANCI
    const comp = document.querySelector('.acordeon-incidente-anci')?.__vueParentComponent;
    
    if (!comp) {
        console.error('‚ùå No se encontr√≥ el componente AcordeonIncidenteANCI');
        console.log('   Aseg√∫rate de estar en la p√°gina de edici√≥n de un incidente ANCI');
        return;
    }
    
    console.log('‚úÖ Componente encontrado');
    
    // 1. Verificar datos iniciales
    console.log('\nüìä DATOS INICIALES:');
    console.log('=====================================');
    
    const datosIniciales = comp.props.datosIniciales;
    if (datosIniciales && datosIniciales.taxonomias_seleccionadas) {
        console.log(`Taxonom√≠as seleccionadas: ${datosIniciales.taxonomias_seleccionadas.length}`);
        datosIniciales.taxonomias_seleccionadas.forEach((tax, idx) => {
            console.log(`\n${idx + 1}. Taxonom√≠a recibida del servidor:`);
            console.log(`   ID: "${tax.id}" (tipo: ${typeof tax.id})`);
            console.log(`   Nombre: ${tax.nombre}`);
            console.log(`   Justificaci√≥n: ${tax.justificacion ? tax.justificacion.substring(0, 50) + '...' : 'Sin justificaci√≥n'}`);
        });
    } else {
        console.log('‚ùå No hay taxonom√≠as seleccionadas en datos iniciales');
    }
    
    // 2. Verificar estado actual del componente
    console.log('\n\nüìã ESTADO ACTUAL DEL COMPONENTE:');
    console.log('=====================================');
    
    const ctx = comp.ctx;
    
    // Taxonom√≠as seleccionadas en el componente
    console.log(`\nTaxonom√≠as seleccionadas: ${ctx.taxonomiasSeleccionadas.value.length}`);
    ctx.taxonomiasSeleccionadas.value.forEach((tax, idx) => {
        console.log(`\n${idx + 1}. Taxonom√≠a en componente:`);
        console.log(`   ID: "${tax.id}" (tipo: ${typeof tax.id})`);
        console.log(`   √Årea: ${tax.area}`);
        console.log(`   Justificaci√≥n: ${tax.justificacion ? tax.justificacion.substring(0, 50) + '...' : 'Sin justificaci√≥n'}`);
    });
    
    // Taxonom√≠as disponibles
    console.log(`\n\nTaxonom√≠as disponibles: ${ctx.taxonomiasDisponibles.value.length}`);
    console.log('Primeras 3 taxonom√≠as disponibles:');
    ctx.taxonomiasDisponibles.value.slice(0, 3).forEach((tax, idx) => {
        console.log(`${idx + 1}. ID: "${tax.id}" (tipo: ${typeof tax.id}) - ${tax.nombre || tax.categoria}`);
    });
    
    // 3. Probar la funci√≥n de comparaci√≥n
    console.log('\n\nüîÑ PRUEBA DE FUNCI√ìN taxonomiaSeleccionada:');
    console.log('=====================================');
    
    if (ctx.taxonomiasSeleccionadas.value.length > 0) {
        const primeraTax = ctx.taxonomiasSeleccionadas.value[0];
        console.log(`\nProbando con ID: "${primeraTax.id}"`);
        
        // Probar la funci√≥n
        const resultado = ctx.taxonomiaSeleccionada(primeraTax.id);
        console.log(`Resultado: ${resultado ? '‚úÖ SELECCIONADA' : '‚ùå NO SELECCIONADA'}`);
        
        // Probar manualmente
        const resultadoManual = ctx.taxonomiasSeleccionadas.value.some(t => String(t.id) === String(primeraTax.id));
        console.log(`Verificaci√≥n manual: ${resultadoManual ? '‚úÖ ENCONTRADA' : '‚ùå NO ENCONTRADA'}`);
    }
    
    // 4. Verificar checkboxes
    console.log('\n\n‚úÖ VERIFICACI√ìN DE CHECKBOXES:');
    console.log('=====================================');
    
    const checkboxes = document.querySelectorAll('input[type="checkbox"][id^="checkbox-"]');
    console.log(`Total de checkboxes encontrados: ${checkboxes.length}`);
    
    let marcados = 0;
    checkboxes.forEach(cb => {
        if (cb.checked) {
            marcados++;
            console.log(`‚úì Checkbox marcado: ${cb.id}`);
        }
    });
    
    console.log(`\nResumen: ${marcados} de ${checkboxes.length} checkboxes marcados`);
    console.log(`Taxonom√≠as seleccionadas: ${ctx.taxonomiasSeleccionadas.value.length}`);
    
    if (marcados !== ctx.taxonomiasSeleccionadas.value.length) {
        console.log('\n‚ö†Ô∏è  INCONSISTENCIA DETECTADA!');
        console.log(`   Esperados: ${ctx.taxonomiasSeleccionadas.value.length} checkboxes marcados`);
        console.log(`   Encontrados: ${marcados} checkboxes marcados`);
    } else {
        console.log('\n‚úÖ Checkboxes consistentes con taxonom√≠as seleccionadas');
    }
    
    // 5. Abrir secci√≥n 4 para visualizar
    if (ctx.seccionesAbiertas?.value) {
        ctx.seccionesAbiertas.value[4] = true;
        console.log('\nüìÇ Secci√≥n 4 abierta para visualizaci√≥n');
    }
    
    // Guardar referencia para debug manual
    window.debugTaxonomias = {
        componente: comp,
        contexto: ctx,
        seleccionadas: ctx.taxonomiasSeleccionadas.value,
        disponibles: ctx.taxonomiasDisponibles.value.slice(0, 10),
        datosIniciales: datosIniciales
    };
    
    console.log('\nüí° Datos guardados en window.debugTaxonomias para inspecci√≥n manual');
    console.log('   Puedes usar: window.debugTaxonomias.seleccionadas');
    
}, 2000); // Esperar 2 segundos para asegurar que todo est√© cargado