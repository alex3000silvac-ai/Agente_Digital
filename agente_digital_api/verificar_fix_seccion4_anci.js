// =====================================================
// SCRIPT DE VERIFICACI√ìN - SECCI√ìN 4 ANCI CORREGIDA
// =====================================================
// Ejecutar en consola despu√©s de aplicar las correcciones
// =====================================================

console.log('üîç VERIFICANDO CORRECCIONES EN SECCI√ìN 4...\n');

function verificarSeccion4ANCI() {
    const resultados = {
        componente: false,
        taxonomias: false,
        estilos: false,
        funciones: false,
        total: 0
    };
    
    // 1. Verificar componente
    const componente = document.querySelector('.acordeon-incidente-anci')?.__vueParentComponent;
    if (componente) {
        resultados.componente = true;
        console.log('‚úÖ Componente AcordeonIncidenteANCI encontrado');
    } else {
        console.log('‚ùå Componente no encontrado');
        return resultados;
    }
    
    const ctx = componente.ctx;
    
    // 2. Verificar taxonom√≠as
    const taxonomiasSeleccionadas = ctx.taxonomiasSeleccionadas?.value || [];
    if (taxonomiasSeleccionadas.length > 0) {
        resultados.taxonomias = true;
        console.log(`‚úÖ ${taxonomiasSeleccionadas.length} taxonom√≠as seleccionadas encontradas`);
        
        // Mostrar detalles
        taxonomiasSeleccionadas.forEach((tax, idx) => {
            console.log(`   ${idx + 1}. ${tax.id}: ${tax.nombre || tax.categoria}`);
            console.log(`      - Justificaci√≥n: ${tax.justificacion ? '‚úÖ' : '‚ùå'}`);
            console.log(`      - Archivos: ${tax.archivos?.length || 0}`);
        });
    } else {
        console.log('‚ö†Ô∏è  No hay taxonom√≠as seleccionadas');
    }
    
    // 3. Verificar estilos aplicados
    console.log('\nüìä VERIFICANDO ESTILOS:');
    
    const taxonomiaItems = document.querySelectorAll('.taxonomia-item');
    let itemsConEstilo = 0;
    
    taxonomiaItems.forEach(item => {
        if (item.classList.contains('taxonomia-seleccionada') || item.classList.contains('seleccionada')) {
            itemsConEstilo++;
            const computed = window.getComputedStyle(item);
            console.log(`   ‚úÖ Item con clase aplicada`);
            console.log(`      - Background: ${computed.background.substring(0, 50)}...`);
            console.log(`      - Border-left: ${computed.borderLeft}`);
        }
    });
    
    if (itemsConEstilo > 0) {
        resultados.estilos = true;
        console.log(`\n‚úÖ ${itemsConEstilo} taxonom√≠as con estilos correctos`);
    } else {
        console.log('\n‚ùå No se encontraron taxonom√≠as con estilos aplicados');
    }
    
    // 4. Verificar funciones
    console.log('\nüîß VERIFICANDO FUNCIONES:');
    
    if (typeof ctx.taxonomiaSeleccionada === 'function') {
        console.log('‚úÖ Funci√≥n taxonomiaSeleccionada existe');
        
        // Probar con una taxonom√≠a
        if (taxonomiasSeleccionadas.length > 0) {
            const testId = taxonomiasSeleccionadas[0].id;
            const resultado = ctx.taxonomiaSeleccionada(testId);
            console.log(`   - Test con ID ${testId}: ${resultado ? '‚úÖ Funciona' : '‚ùå No funciona'}`);
        }
    }
    
    if (typeof ctx.obtenerTaxonomiaSeleccionada === 'function') {
        console.log('‚úÖ Funci√≥n obtenerTaxonomiaSeleccionada existe');
        resultados.funciones = true;
    }
    
    // 5. Verificar visibilidad de elementos
    console.log('\nüëÅÔ∏è  VERIFICANDO VISIBILIDAD:');
    
    const elementosVerificar = {
        'Comentarios': '.taxonomia-seleccionada textarea',
        'Archivos': '.taxonomia-seleccionada .archivo-item',
        'Botones': '.taxonomia-seleccionada button'
    };
    
    for (const [nombre, selector] of Object.entries(elementosVerificar)) {
        const elementos = document.querySelectorAll(selector);
        if (elementos.length > 0) {
            console.log(`‚úÖ ${nombre}: ${elementos.length} elementos visibles`);
        } else {
            console.log(`‚ö†Ô∏è  ${nombre}: No se encontraron elementos`);
        }
    }
    
    // Calcular resultado total
    resultados.total = Object.values(resultados).filter(v => v === true).length - 1; // -1 por 'total'
    
    // Resumen final
    console.log('\n' + '='.repeat(50));
    console.log('üìä RESUMEN DE VERIFICACI√ìN:');
    console.log('='.repeat(50));
    console.log(`Componente: ${resultados.componente ? '‚úÖ' : '‚ùå'}`);
    console.log(`Taxonom√≠as: ${resultados.taxonomias ? '‚úÖ' : '‚ùå'}`);
    console.log(`Estilos: ${resultados.estilos ? '‚úÖ' : '‚ùå'}`);
    console.log(`Funciones: ${resultados.funciones ? '‚úÖ' : '‚ùå'}`);
    console.log(`\nPuntuaci√≥n: ${resultados.total}/4`);
    
    if (resultados.total === 4) {
        console.log('\nüéâ ¬°TODAS LAS CORRECCIONES FUNCIONAN CORRECTAMENTE!');
    } else if (resultados.total >= 2) {
        console.log('\n‚ö†Ô∏è  Algunas correcciones funcionan, pero hay problemas pendientes');
    } else {
        console.log('\n‚ùå Las correcciones no se aplicaron correctamente');
        console.log('   Intenta recargar la p√°gina y ejecutar el fix universal');
    }
    
    return resultados;
}

// Ejecutar verificaci√≥n
const resultado = verificarSeccion4ANCI();

// Guardar para debug
window.verificacionSeccion4 = resultado;

console.log('\nüí° Resultado guardado en window.verificacionSeccion4');